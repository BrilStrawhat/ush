!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFSIZE	./inc/ush.h	/^#define BUFSIZE /;"	d
CFLG	./Makefile	/^CFLG =	-std=c11 -Wall -Wextra -Werror -Wpedantic -g3 -fsanitize=address -fsanitize=undefined -Wno-unused-function -Wno-unused-parameter -Wno-unused-variable # Withou "unused" warning;$/;"	m
CFLGS	./libmx/Makefile	/^CFLGS = -std=c11 -Wall -Wextra -Wpedantic -Werror -g$/;"	m
COMP	./Makefile	/^COMP	=	clang$/;"	m
HEADTMP	./libmx/Makefile	/^HEADTMP = .\/libmx.h$/;"	m
INC	./Makefile	/^INC		=	ush.h$/;"	m
INC	./libmx/Makefile	/^INC = .\/inc\/libmx.h$/;"	m
INCD	./Makefile	/^INCD	=	inc$/;"	m
INCS	./Makefile	/^INCS	=	$(addprefix $(INCD)\/, $(INC))$/;"	m
LIBMX_H	./libmx/inc/libmx.h	/^#define LIBMX_H$/;"	d
LMXA	./Makefile	/^LMXA:=	$(LMXD)\/libmx.a$/;"	m
LMXD	./Makefile	/^LMXD	=	libmx$/;"	m
LMXI	./Makefile	/^LMXI:=	$(LMXD)\/inc$/;"	m
NAME	./Makefile	/^NAME	=	ush$/;"	m
NAME	./libmx/Makefile	/^NAME = libmx.a$/;"	m
OBJ	./libmx/Makefile	/^OBJ = .\/mx_binary_search.o \\$/;"	m
OBJD	./Makefile	/^OBJD	=	obj$/;"	m
OBJO	./libmx/Makefile	/^OBJO = .\/obj\/mx_binary_search.o \\$/;"	m
OBJS	./Makefile	/^OBJS	=	$(addprefix $(OBJD)\/, $(SRC:%.c=%.o))$/;"	m
SRC	./Makefile	/^SRC		=	main.c mx_loop.c mx_create_head.c mx_tok.c \\$/;"	m
SRC	./libmx/Makefile	/^SRC = .\/mx_binary_search.c \\$/;"	m
SRCD	./Makefile	/^SRCD	=	src$/;"	m
SRCS	./Makefile	/^SRCS	=	$(addprefix $(SRCD)\/, $(SRC))$/;"	m
SRCS	./libmx/Makefile	/^SRCS = .\/src\/mx_binary_search.c \\$/;"	m
USH_H	./inc/ush.h	/^#define USH_H$/;"	d
__stub_helper__TEXT	./mx_echo.c.dSYM/Contents/Resources/DWARF/mx_echo.c	/^/;"	v
and	./inc/ush.h	/^    struct s_cmd *and;$/;"	m	struct:s_cmd	typeref:struct:s_cmd::s_cmd
auditor	./src/mx_launch_init.c	/^static void auditor(int *bufsize, char ****toks) {$/;"	f	file:
auditor	./src/mx_tok.c	/^static void auditor(int *bufsize, char ****toks) {$/;"	f	file:
builtins	./inc/ush.h	/^    char **builtins;$/;"	m	struct:s_shell
cmd	./inc/ush.h	/^    char *cmd;$/;"	m	struct:s_cmd
cmd_arr	./inc/ush.h	/^    char **cmd_arr; \/\/ env -ppp$/;"	m	struct:launch
command	./inc/ush.h	/^    struct s_cmd *command;$/;"	m	struct:s_head	typeref:struct:s_head::s_cmd
count_par	./src/mx_ex_param.c	/^static int count_par(char *line) {$/;"	f	file:
count_word_len	./libmx/src/mx_strsplit.c	/^static int count_word_len(const char *s, char c) {$/;"	f	file:
create_artree	./src/mx_treefull.c	/^static char **create_artree(char *tok) {$/;"	f	file:
create_node	./src/mx_push_variable.c	/^static t_variables *create_node(char *name, char *value) {$/;"	f	file:
data	./libmx/inc/libmx.h	/^    void  *data;$/;"	m	struct:s_list
ex_join	./src/mx_ex_param.c	/^static void ex_join(char *line, char *old_str, char **new_str) {$/;"	f	file:
export_variables	./inc/ush.h	/^    t_variables *export_variables;$/;"	m	struct:s_shell
filepath	./inc/ush.h	/^    char *filepath; \/\/path to binary;$/;"	m	struct:launch
fill_str	./src/mx_fill_str.c	/^static void fill_str(char **tok, int *i, char ***tmp, int *j) {$/;"	f	file:
fillor	./src/mx_treefull.c	/^static void fillor(char *tok, t_cmd **err) {$/;"	f	file:
flag_parser	./mx_echo.c	/^static void flag_parser(int argc, char **argv, bool *flags, int *i) {$/;"	f	file:
get_char_index	./src/mx_back_slesh.c	/^static int get_char_index(const char *str, char c, int *value) {$/;"	f	file:
get_export	./src/mx_init_shell.c	/^static t_variables *get_export(void) {$/;"	f	file:
get_null	./src/mx_fill_str.c	/^static char **get_null(char **tok, char **tmp, int j, int i) {$/;"	f	file:
get_pwd	./src/mx_init_shell.c	/^static char *get_pwd(void) {$/;"	f	file:
get_variables	./src/mx_init_shell.c	/^static t_variables *get_variables(void) {$/;"	f	file:
i_check_data	./libmx/src/mx_read_line.c	/^static int i_check_data(int nbytes, char **data, const int fd) {$/;"	f	file:
i_count_bytes	./libmx/src/mx_read_line.c	/^static int i_count_bytes(char **data, char **lineptr, char delim, int fd) {$/;"	f	file:
i_read	./libmx/src/mx_read_line.c	/^static int i_read(char **data, const int fd, size_t buf_size, char delim) {$/;"	f	file:
init_shlvl	./src/mx_init_shell.c	/^static void init_shlvl(t_shell *shell) {$/;"	f	file:
is_backslash_char	./mx_echo.c	/^static bool is_backslash_char(char c) {$/;"	f	file:
launch	./inc/ush.h	/^typedef struct launch {$/;"	s
len_par	./src/mx_ex_param.c	/^static char *len_par(char *line, int *len) {$/;"	f	file:
main	./environ.c	/^int main(void) {$/;"	f
main	./mx_echo.c	/^int main(int argc, char **argv) {$/;"	f
main	./mx_run_command.c	/^int main(int argc, char **argv) {$/;"	f
main	./mx_sleep.c	/^int main(int argc, char **argv) {$/;"	f
main	./src/main.c	/^int main(int args, char* argv[]) {$/;"	f
mx_back_slesh	./src/mx_back_slesh.c	/^int mx_back_slesh(char **str, int* value) {$/;"	f
mx_binary_search	./libmx/src/mx_binary_search.c	/^int mx_binary_search(char **arr, int size, const char *s, int *count) {$/;"	f
mx_bubble_sort	./libmx/src/mx_bubble_sort.c	/^int mx_bubble_sort(char **arr, int size) {$/;"	f
mx_check_builtin	./src/mx_find_cmd.c	/^int mx_check_builtin(st_launch *l_inf, t_shell *shell) {$/;"	f
mx_check_line	./src/mx_check_line.c	/^int mx_check_line(char *line) {$/;"	f
mx_check_quotes	./src/mx_check_quotes.c	/^int mx_check_quotes(char *line, char delim) {$/;"	f
mx_count_substr	./libmx/src/mx_count_substr.c	/^int mx_count_substr(const char *str, const char *sub) {$/;"	f
mx_count_words	./libmx/src/mx_count_words.c	/^int mx_count_words(const char *str, char c) {$/;"	f
mx_create_cmd	./src/mx_treefull.c	/^t_cmd *mx_create_cmd(char *cmd, int i) {$/;"	f
mx_create_head	./src/mx_create_head.c	/^t_head *mx_create_head(char *line) {$/;"	f
mx_create_node	./libmx/src/mx_create_node.c	/^t_list *mx_create_node(void *data) {$/;"	f
mx_cycle_for_quotes	./src/mx_check_quotes.c	/^int mx_cycle_for_quotes(char *line, char delim, int *i) {$/;"	f
mx_del_extra_spaces	./libmx/src/mx_del_extra_spaces.c	/^char *mx_del_extra_spaces(const char *str) {$/;"	f
mx_del_strarr	./libmx/src/mx_del_strarr.c	/^void mx_del_strarr(char ***arr) {$/;"	f
mx_ex_join	./src/mx_ex_join.c	/^void mx_ex_join(char **res, char *full_str, int *r) {$/;"	f
mx_ex_param	./src/mx_ex_param.c	/^char *mx_ex_param(char *line) {$/;"	f
mx_exec_prog	./src/mx_exec_prog.c	/^int mx_exec_prog(st_launch *l_inf, t_shell *shell) { \/\/ Not auditor(($/;"	f
mx_file_to_str	./libmx/src/mx_file_to_str.c	/^char *mx_file_to_str(const char *filename) {$/;"	f
mx_fill_str	./src/mx_fill_str.c	/^char **mx_fill_str(char *tok, int count) {$/;"	f
mx_find_filepath	./src/mx_find_cmd.c	/^int mx_find_filepath(char **cmd_arr, char **filepath) { \/\/ rewrite to builtin 'which'$/;"	f
mx_foreach	./libmx/src/mx_foreach.c	/^void mx_foreach(int *arr, int size, void (*f)(int)) {$/;"	f
mx_get_char_index	./libmx/src/mx_get_char_index.c	/^int mx_get_char_index(const char *str, char c) {$/;"	f
mx_get_substr_index	./libmx/src/mx_get_substr_index.c	/^int mx_get_substr_index(const char *str, const char *sub) {$/;"	f
mx_hex_to_nbr	./libmx/src/mx_hex_to_nbr.c	/^unsigned long mx_hex_to_nbr(const char *hex) {$/;"	f
mx_init_builtin	./src/mx_init_shell.c	/^static char **mx_init_builtin() {$/;"	f	file:
mx_init_shell	./src/mx_init_shell.c	/^void mx_init_shell(t_shell *shell) {$/;"	f
mx_intlen	./libmx/src/mx_intlen.c	/^int mx_intlen(int number) {$/;"	f
mx_isspace	./libmx/src/mx_isspace.c	/^	bool mx_isspace(int c) {$/;"	f
mx_itoa	./libmx/src/mx_itoa.c	/^char *mx_itoa(int number) {$/;"	f
mx_launch_cmd	./src/mx_launch_cmd.c	/^void mx_launch_cmd(t_head *forest, t_shell *shell) {$/;"	f
mx_launch_init	./src/mx_launch_init.c	/^st_launch *mx_launch_init(char *cmd, t_shell *shell) {$/;"	f
mx_list_size	./libmx/src/mx_list_size.c	/^int mx_list_size(t_list *list) {$/;"	f
mx_loop	./src/mx_loop.c	/^void mx_loop(t_head *head) {$/;"	f
mx_memccpy	./libmx/src/mx_memccpy.c	/^void *mx_memccpy(void *restrict dst, const void *restrict src, int c, size_t n) {$/;"	f
mx_memchr	./libmx/src/mx_memchr.c	/^void *mx_memchr(const void *s, int c, size_t n) {$/;"	f
mx_memcmp	./libmx/src/mx_memcmp.c	/^int mx_memcmp(const void *s1, const void *s2, size_t n) {$/;"	f
mx_memcpy	./libmx/src/mx_memcpy.c	/^void *mx_memcpy(void *restrict dst, const void *restrict src, size_t n) {$/;"	f
mx_memmem	./libmx/src/mx_memmem.c	/^void *mx_memmem(const void *big, size_t big_len, const void *little, size_t little_len) {$/;"	f
mx_memmove	./libmx/src/mx_memmove.c	/^void *mx_memmove(void *dst, const void *src, size_t len) { $/;"	f
mx_memrchr	./libmx/src/mx_memrchr.c	/^void *mx_memrchr(const void *s, int c, size_t n) {$/;"	f
mx_memset	./libmx/src/mx_memset.c	/^void *mx_memset(void *b, int c, size_t len) {$/;"	f
mx_nbr_to_hex	./libmx/src/mx_nbr_to_hex.c	/^char *mx_nbr_to_hex(unsigned long nbr) {$/;"	f
mx_new_pstr	./libmx/src/mx_new_pstr.c	/^void mx_new_pstr(const char *s) {$/;"	f
mx_pop_back	./libmx/src/mx_pop_back.c	/^void mx_pop_back(t_list **head) {$/;"	f
mx_pop_front	./libmx/src/mx_pop_front.c	/^void mx_pop_front(t_list **list) {$/;"	f
mx_pow	./libmx/src/mx_pow.c	/^double mx_pow(double n, unsigned int pow) {$/;"	f
mx_print_strarr	./libmx/src/mx_print_strarr.c	/^void mx_print_strarr(char **arr, const char *delim) {$/;"	f
mx_print_unicode	./libmx/src/mx_print_unicode.c	/^void mx_print_unicode(wchar_t c)$/;"	f
mx_printchar	./libmx/src/mx_printchar.c	/^void mx_printchar(char x) {$/;"	f
mx_printerr	./libmx/src/mx_printerr.c	/^void mx_printerr(const char *s) {$/;"	f
mx_printforest	./src/mx_create_head.c	/^void mx_printforest(t_head *forest) {$/;"	f
mx_printint	./libmx/src/mx_printint.c	/^void mx_printint(int n) {$/;"	f
mx_printstr	./libmx/src/mx_printstr.c	/^void mx_printstr(const char *s) {$/;"	f
mx_push_back	./libmx/src/mx_push_back.c	/^void mx_push_back(t_list **list, void *data) {$/;"	f
mx_push_front	./libmx/src/mx_push_front.c	/^void mx_push_front(t_list **list, void *data) {$/;"	f
mx_push_variable	./src/mx_push_variable.c	/^void mx_push_variable(t_variables **list, void *name, void *value) {$/;"	f
mx_pushtree	./src/mx_treefull.c	/^void mx_pushtree(t_head **forest, char *tok) {$/;"	f
mx_quicksort	./libmx/src/mx_quicksort.c	/^int mx_quicksort(char **arr, int left, int right) {$/;"	f
mx_read_line	./libmx/src/mx_read_line.c	/^int mx_read_line(char **lineptr, size_t buf_size, char delim, const int fd) {$/;"	f
mx_realloc	./libmx/src/mx_realloc.c	/^void *mx_realloc(void *ptr, size_t size) {$/;"	f
mx_replace_substr	./libmx/src/mx_replace_substr.c	/^char *mx_replace_substr(const char *str, const char *sub, const char *replace) {$/;"	f
mx_sort_list	./libmx/src/mx_sort_list.c	/^t_list *mx_sort_list(t_list *list, bool (*cmp)(void *a, void *b)) {$/;"	f
mx_sqrt	./libmx/src/mx_sqrt.c	/^int mx_sqrt(int x) {$/;"	f
mx_start_builtin	./src/mx_start.c	/^void mx_start_builtin(st_launch *l_inf, t_shell *shell) {$/;"	f
mx_str_reverse	./libmx/src/mx_str_reverse.c	/^void mx_str_reverse(char *s) {$/;"	f
mx_strcat	./libmx/src/mx_strcat.c	/^char *mx_strcat(char *restrict s1, const char *restrict s2) {$/;"	f
mx_strchr	./libmx/src/mx_strchr.c	/^char* mx_strchr(const char *s, int c) {$/;"	f
mx_strcmp	./libmx/src/mx_strcmp.c	/^int mx_strcmp(const char *s1, const char *s2) {$/;"	f
mx_strcpy	./libmx/src/mx_strcpy.c	/^char *mx_strcpy(char *dst, const char *src) {$/;"	f
mx_strdel	./libmx/src/mx_strdel.c	/^void mx_strdel(char **str) {$/;"	f
mx_strdup	./libmx/src/mx_strdup.c	/^char *mx_strdup(const char *str) {$/;"	f
mx_strjoin	./libmx/src/mx_strjoin.c	/^char *mx_strjoin(const char *s1, const char *s2) {$/;"	f
mx_strlen	./libmx/src/mx_strlen.c	/^int mx_strlen(const char *s) {$/;"	f
mx_strncmp	./libmx/src/mx_strncmp.c	/^int mx_strncmp(const char *s1, const char *s2, size_t n) {$/;"	f
mx_strncpy	./libmx/src/mx_strncpy.c	/^char *mx_strncpy(char *dst, const char *src, int len) {$/;"	f
mx_strndup	./libmx/src/mx_strndup.c	/^char *mx_strndup(const char *s1, size_t n) {$/;"	f
mx_strnew	./libmx/src/mx_strnew.c	/^char *mx_strnew(const int size) {$/;"	f
mx_strsplit	./libmx/src/mx_strsplit.c	/^char **mx_strsplit(const char *s, char c) {$/;"	f
mx_strstr	./libmx/src/mx_strstr.c	/^char *mx_strstr(const char *haystack, const char *needle) { \/\/ шукаємо перше входження підстроки needle в строці haystac$/;"	f
mx_strtrim	./libmx/src/mx_strtrim.c	/^char *mx_strtrim(const char *str) {$/;"	f
mx_swap_char	./libmx/src/mx_swap_char.c	/^void mx_swap_char(char *s1, char *s2) {$/;"	f
mx_swap_str_ptrs	./libmx/src/mx_swap_str_ptrs.c	/^void mx_swap_str_ptrs(char **arg1, char **arg2)$/;"	f
mx_tilda	./src/mx_tilda.c	/^void mx_tilda(char **s) {$/;"	f
mx_tok	./src/mx_tok.c	/^char **mx_tok(char *line) {$/;"	f
mx_treefull	./src/mx_treefull.c	/^t_cmd *mx_treefull(char *tok) {$/;"	f
mx_trim_token	./src/mx_tok.c	/^char *mx_trim_token(char *str) {$/;"	f
name	./inc/ush.h	/^    char *name;$/;"	m	struct:s_variables
next	./inc/ush.h	/^    struct s_head *next;$/;"	m	struct:s_head	typeref:struct:s_head::s_head
next	./inc/ush.h	/^    struct s_variables *next;$/;"	m	struct:s_variables	typeref:struct:s_variables::s_variables
next	./libmx/inc/libmx.h	/^    struct s_list *next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
numlen	./libmx/src/mx_itoa.c	/^static int numlen(long long value) {$/;"	f	file:
open_braces	./src/mx_ex_param.c	/^static char* open_braces(char *line, int beg, int end) {$/;"	f	file:
or	./inc/ush.h	/^    struct s_cmd *or;$/;"	m	struct:s_cmd	typeref:struct:s_cmd::s_cmd
par	./inc/ush.h	/^    char **par; \/\/ a=b b=c ..$/;"	m	struct:launch
print_error	./src/mx_exec_prog.c	/^static void print_error(st_launch *l_inf) {$/;"	f	file:
print_flag_e	./mx_echo.c	/^static void print_flag_e(int argc, int i, char **argv) {$/;"	f	file:
print_hex	./mx_echo.c	/^static void print_hex(const char *str, int *j) {$/;"	f	file:
print_octal	./mx_echo.c	/^static void print_octal(const char *str, int *j) {$/;"	f	file:
pwd	./inc/ush.h	/^    char *pwd;$/;"	m	struct:s_shell
read_line	./src/mx_loop.c	/^static char *read_line(void) {$/;"	f	file:
replace_backslash_char	./mx_echo.c	/^static void replace_backslash_char(char c) {$/;"	f	file:
s_cmd	./inc/ush.h	/^typedef struct s_cmd {$/;"	s
s_head	./inc/ush.h	/^typedef struct s_head {$/;"	s
s_list	./libmx/inc/libmx.h	/^typedef struct  s_list {$/;"	s
s_shell	./inc/ush.h	/^typedef struct s_shell {$/;"	s
s_variables	./inc/ush.h	/^typedef struct s_variables {$/;"	s
ss_strlen	./libmx/src/mx_hex_to_nbr.c	/^static int ss_strlen(const char *str) {$/;"	f	file:
st_launch	./inc/ush.h	/^}              st_launch;$/;"	t	typeref:struct:launch
status	./inc/ush.h	/^    int status;$/;"	m	struct:s_shell
strfdup	./src/mx_init_shell.c	/^static char *strfdup(char *str, int n) {$/;"	f	file:
t_cmd	./inc/ush.h	/^}              t_cmd;$/;"	t	typeref:struct:s_cmd
t_head	./inc/ush.h	/^}               t_head;$/;"	t	typeref:struct:s_head
t_list	./libmx/inc/libmx.h	/^}         t_list;$/;"	t	typeref:struct:s_list
t_shell	./inc/ush.h	/^}               t_shell;$/;"	t	typeref:struct:s_shell
t_variables	./inc/ush.h	/^}                t_variables;    $/;"	t	typeref:struct:s_variables
tilda	./src/mx_tilda.c	/^static void tilda(char **line) {$/;"	f	file:
tilda_minus	./src/mx_tilda.c	/^static void tilda_minus(char **line) {$/;"	f	file:
tilda_plus	./src/mx_tilda.c	/^static void tilda_plus(char **line) {$/;"	f	file:
tilda_user	./src/mx_tilda.c	/^static void tilda_user(char **line) {$/;"	f	file:
tokensize	./src/mx_launch_init.c	/^static void tokensize(char *line, char ***toks, int bufsize, int position) {$/;"	f	file:
tokensize	./src/mx_tok.c	/^static int tokensize(char *line, char ***toks, int bufsize, int position) {$/;"	f	file:
type	./inc/ush.h	/^    int type; \/\/ no cmd found , builtin, binary      (alias, shell func)$/;"	m	struct:launch
valid_operator	./src/mx_check_line.c	/^static int valid_operator(char *line, int i) {$/;"	f	file:
value	./inc/ush.h	/^    char *value;$/;"	m	struct:s_variables
variables	./inc/ush.h	/^    t_variables *variables;$/;"	m	struct:s_shell
